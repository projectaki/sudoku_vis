{"version":3,"sources":["SudokuBack/algorithms.js","SudokuFront/Sudoku.jsx","App.js","reportWebVitals.js","index.js"],"names":["finished","board","result","recurse","count","i","Math","floor","j","c","length","slice","k","isValid","numb","boxSafe","rowSafe","colSafe","startI","startJ","smallN","sqrt","l","num","Sudoku","props","state","grid","this","refresh","row","currentRow","col","push","createGrid","setState","setUpNumbers","ms","elems","document","getElementsByClassName","index","coordMap","innerHTML","delay","SUDOKU","solve","className","map","rowid","node","nodeid","class","onClick","hardest","React","Component","n","Promise","done","setTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.37fec2ea.chunk.js","sourcesContent":["\r\nvar finished = false;\r\nvar board = [];\r\nvar n = 9;\r\nvar result = [];\r\n\r\nexport const solve = (grid) => {\r\n    board = grid;\r\n    recurse(0);\r\n    return result;\r\n}\r\n\r\n\r\nexport const recurse = (count) => {\r\n    // start at 0, convert number to i,j mapping\r\n    let i = Math.floor(count/n);\r\n    let j = count % n;\r\n    // if i = n then that means we have solved the board ( it only happens if we successfully fill out the last cell)\r\n    // Print solution\r\n    if (i === n) {\r\n        finished = true;\r\n        for (var c = 0; c < board.length; c++) {\r\n            result[c] = board[c].slice();\r\n        }\r\n    }\r\n    \r\n    // If we have found a solution then any more calls to the solve function will do nothing\r\n    if(!finished) {\r\n        // Skip the already filled out cells\r\n        if (board[i][j] === 0) {\r\n            for (let k = 1; k <= n; k++) {\r\n                if (isValid(i,j,k)) {\r\n                    // optimization\r\n                    board[i][j] = k;\r\n                    recurse(count + 1);\r\n                }\r\n            }\r\n            board[i][j] = 0;\r\n        }\r\n        else {\r\n            recurse(count + 1);\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n}\r\n\r\nexport const isValid = (i, j, numb) => {\r\n    return boxSafe(i,j,numb) && rowSafe(i,numb) && colSafe(j,numb);\r\n}\r\n\r\n\r\nexport const boxSafe = (i, j, numb) => {\r\n    let smallN = Math.sqrt(n);\r\n    let startI;\r\n    let startJ;\r\n    if (i % smallN === 0) startI = (floor(i/smallN))*smallN;\r\n    else startI = floor(i/smallN) * smallN;\r\n    if (j % smallN === 0) startJ = (floor(j/smallN))*smallN;\r\n    else startJ = floor(j/smallN) * smallN;\r\n\r\n    for (let k = startI; k < startI + smallN; k++) {\r\n        for (let l = startJ; l < startJ + smallN; l++) {\r\n            if (board[k][l] === numb) return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nexport const rowSafe = (i, numb) => {\r\n\r\n    for (let j = 0; j < n; j++) {\r\n        if (board[i][j] === numb) return false;\r\n    }\r\n    return true;\r\n\r\n}\r\n\r\n\r\nexport const colSafe = (j, numb) => {\r\n    for (let i = 0; i < n; i++) {\r\n        if (board[i][j] === numb) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction floor(num) {\r\n    return Math.floor(num);\r\n}","import React from \"react\";\r\nimport { solve } from \"../SudokuBack/algorithms\";\r\nimport \"./Sudoku.css\";\r\n\r\nexport default class Sudoku extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            grid: [],\r\n        \r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n        \r\n    }\r\n\r\n    refresh() {\r\n        const grid = createGrid();\r\n        this.setState({grid});\r\n        this.setUpNumbers(0);\r\n    }\r\n\r\n    async setUpNumbers(ms) {\r\n        \r\n        const elems = document.getElementsByClassName(\"node\");\r\n        for (let i = 0; i < this.state.grid.length; i++) {\r\n            for (let j = 0; j < this.state.grid.length; j++) {\r\n                let index = coordMap(i, j);\r\n                if (this.state.grid[i][j] !== 0) {\r\n                    elems[index].innerHTML = this.state.grid[i][j];\r\n                }\r\n                else {\r\n                    elems[index].innerHTML = \"\";\r\n                }\r\n                if (ms !== 0) {\r\n                    await delay(ms);\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    hardest() {\r\n        hardestBoard(this.state.grid);\r\n        this.setUpNumbers(0);\r\n    }\r\n\r\n    solve() {\r\n        const grid = solve(this.state.grid);\r\n        this.setState({grid});\r\n        this.setUpNumbers(20);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {grid} = this.state;\r\n        \r\n        return (\r\n            <>\r\n            <div className=\"title\">\r\n                SUDOKU SOLVER\r\n            </div>\r\n                <div className=\"boardCont\">\r\n                    {grid.map((row, rowid) => {\r\n                        return row.map( (node, nodeid) => { \r\n                                return <div key={nodeid} className={\"node \" + \"r\"+rowid+\"c\"+nodeid + \" \" + \"col\"+nodeid + \" \" + \"row\"+rowid}></div>; \r\n                        });\r\n                    })}    \r\n                </div>\r\n\r\n                <div class=\"buttonCont\">\r\n                    <button onClick={() => this.refresh()}>Refresh</button>\r\n                    <button onClick={() => this.solve()}>Solve</button>\r\n                    <button onClick={() => this.hardest()}>hardest</button>\r\n                </div>\r\n                \r\n                \r\n                \r\n            </>\r\n            \r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nfunction createGrid() {\r\n    const grid = [];\r\n    for (let row = 0; row < 9; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 9; col++) {\r\n            currentRow.push(0);\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nfunction coordMap(i , j) {\r\n    return i * 9 + j;\r\n}\r\n\r\nfunction delay(n) {  \r\n    n = n || 2000;\r\n    return new Promise(done => {\r\n      setTimeout(() => {\r\n        done();\r\n      }, n);\r\n    });\r\n  }\r\n\r\nfunction hardestBoard(SUDOKU) {\r\n    SUDOKU[0][0] = 8;\r\n    SUDOKU[1][2] = 3;\r\n    SUDOKU[1][3] = 6;\r\n    SUDOKU[2][1] = 7;\r\n    SUDOKU[2][4] = 9;\r\n    SUDOKU[2][6] = 2;\r\n    SUDOKU[3][1] = 5;\r\n    SUDOKU[3][5] = 7;\r\n    SUDOKU[4][4] = 4;\r\n    SUDOKU[4][5] = 5;\r\n    SUDOKU[4][6] = 7;\r\n    SUDOKU[5][3] = 1;\r\n    SUDOKU[5][7] = 3;\r\n    SUDOKU[6][2] = 1;\r\n    SUDOKU[6][7] = 6;\r\n    SUDOKU[6][8] = 8;\r\n    SUDOKU[7][2] = 8;\r\n    SUDOKU[7][3] = 5;\r\n    SUDOKU[7][7] = 1;\r\n    SUDOKU[8][1] = 9;\r\n    SUDOKU[8][6] = 4;\r\n}","import Sudoku from \"./SudokuFront/Sudoku.jsx\";\n\nfunction App() {\n  return (\n    <Sudoku></Sudoku>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}