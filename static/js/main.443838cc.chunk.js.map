{"version":3,"sources":["SudokuBack/algorithms.js","SudokuFront/Sudoku.jsx","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["finished","board","result","solve","grid","row","i","n","push","recurse","res","j","count","Math","floor","c","length","slice","k","isValid","numb","boxSafe","rowSafe","colSafe","startI","startJ","smallN","sqrt","l","num","Sudoku","props","handleChangeFile","file","fileData","FileReader","onloadend","handleFile","readAsText","e","content","target","setState","upload","filterUpload","setupBoard","state","this","refresh","M","window","elems","document","querySelectorAll","elem","Modal","init","getElementById","getInstance","open","fillBoard","getElementsByClassName","innerHTML","numbers","Set","add","toString","has","parseInt","delay","className","style","position","padding","margin","href","color","class","fontSize","type","name","accept","onChange","files","paddingTop","onClick","id","React","Component","Promise","done","setTimeout","Navbar","textAlign","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.443838cc.chunk.js","sourcesContent":["\r\nvar finished = false;\r\nvar board = [];\r\nvar n = 9;\r\nvar result = [];\r\n\r\nexport const solve = (grid) => {\r\n    let row = [];\r\n    for(let i = 0; i < n*n; i++) {\r\n        if(i%n === 8) {\r\n            row.push(grid[i]);\r\n            board.push(row);\r\n            row = [];\r\n        }\r\n        else {\r\n            row.push(grid[i]);\r\n        }\r\n    }\r\n    recurse(0);\r\n    const res = [];\r\n    for (let i = 0; i < n; i++) {\r\n        for (let j = 0; j < n; j++) {\r\n            res.push(result[i][j]);\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\nexport const recurse = (count) => {\r\n    // start at 0, convert number to i,j mapping\r\n    let i = Math.floor(count/n);\r\n    let j = count % n;\r\n    // if i = n then that means we have solved the board ( it only happens if we successfully fill out the last cell)\r\n    // Print solution\r\n    if (i === n) {\r\n        finished = true;\r\n        for (var c = 0; c < board.length; c++) {\r\n            result[c] = board[c].slice();\r\n        }\r\n    }\r\n    \r\n    // If we have found a solution then any more calls to the solve function will do nothing\r\n    if(!finished) {\r\n        // Skip the already filled out cells\r\n        if (board[i][j] === 0) {\r\n            for (let k = 1; k <= n; k++) {\r\n                if (isValid(i,j,k)) {\r\n                    // optimization\r\n                    board[i][j] = k;\r\n                    recurse(count + 1);\r\n                }\r\n            }\r\n            board[i][j] = 0;\r\n        }\r\n        else {\r\n            recurse(count + 1);\r\n        }\r\n    }\r\n    \r\n\r\n    \r\n}\r\n\r\nexport const isValid = (i, j, numb) => {\r\n    return boxSafe(i,j,numb) && rowSafe(i,numb) && colSafe(j,numb);\r\n}\r\n\r\n\r\nexport const boxSafe = (i, j, numb) => {\r\n    let smallN = Math.sqrt(n);\r\n    let startI;\r\n    let startJ;\r\n    if (i % smallN === 0) startI = (floor(i/smallN))*smallN;\r\n    else startI = floor(i/smallN) * smallN;\r\n    if (j % smallN === 0) startJ = (floor(j/smallN))*smallN;\r\n    else startJ = floor(j/smallN) * smallN;\r\n\r\n    for (let k = startI; k < startI + smallN; k++) {\r\n        for (let l = startJ; l < startJ + smallN; l++) {\r\n            if (board[k][l] === numb) return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nexport const rowSafe = (i, numb) => {\r\n\r\n    for (let j = 0; j < n; j++) {\r\n        if (board[i][j] === numb) return false;\r\n    }\r\n    return true;\r\n\r\n}\r\n\r\n\r\nexport const colSafe = (j, numb) => {\r\n    for (let i = 0; i < n; i++) {\r\n        if (board[i][j] === numb) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction floor(num) {\r\n    return Math.floor(num);\r\n}","import React from \"react\";\r\nimport { solve } from \"../SudokuBack/algorithms\";\r\nimport \"./Sudoku.css\";\r\n\r\n\r\n\r\nexport default class Sudoku extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            board: [],\r\n            upload: [],\r\n            result: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refresh();\r\n        var M = window.M;\r\n        var elems = document.querySelectorAll('.modal');\r\n        var instances = M.Modal.init(elems, []);\r\n        var elem = document.getElementById(\"modal1\");\r\n        var instance = M.Modal.getInstance(elem);\r\n        instance.open();\r\n    }\r\n\r\n    refresh() {\r\n        this.setState({board: fillBoard()});\r\n        this.setupBoard(this.state.board);\r\n    }\r\n\r\n    setupBoard(board) {\r\n        \r\n        const elems = document.getElementsByClassName(\"node\");\r\n        for (let i = 0; i < board.length; i++) {\r\n            if(board[i] !== 0) {\r\n                elems[i].innerHTML = board[i];\r\n            }\r\n            else {\r\n                elems[i].innerHTML = \"\";\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    //remove newlines etc from file to make a only number array of length 81\r\n    filterUpload() {\r\n        const grid = [];\r\n        var upload = this.state.upload;\r\n        // create hashmap of number strings from 0-9\r\n        const numbers = new Set();\r\n        for(let i = 0; i < 10; i++) {\r\n            numbers.add(i.toString());\r\n        }\r\n        // if strign at i is number at to grid\r\n        for (let i = 0; i < upload.length; i++) {\r\n            if(numbers.has(upload[i])) {\r\n                grid.push(parseInt(upload[i]));\r\n            }\r\n            \r\n        }\r\n        this.setState({board: grid});\r\n    }\r\n\r\n\r\n    async solve() {\r\n        const grid = solve(this.state.board);\r\n        this.setState({result: grid});\r\n        await delay(1);\r\n        this.setupBoard(this.state.result);\r\n    }\r\n\r\n    handleChangeFile = (file) => {\r\n        let fileData = new FileReader();\r\n        fileData.onloadend = this.handleFile;\r\n        fileData.readAsText(file);\r\n    }\r\n\r\n    handleFile = (e) => {\r\n        const content = e.target.result;\r\n        this.setState({upload: content});\r\n        this.filterUpload();\r\n        this.setupBoard(this.state.board);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {board} = this.state;\r\n        const grid = [];\r\n        for(let i = 0; i < board.length; i++) {\r\n            grid.push(<div key={i} className={\"node \" + \"r\"+Math.floor(i/9)+\"c\"+i%9 + \" \" + \"row\"+Math.floor(i/9) + \" \" + \"col\"+ i%9  }></div>);\r\n        }\r\n\r\n        return (\r\n            <>\r\n            <div className=\"back-btn\" style={{position: \"absolute\", padding: 0, margin: 0}}>\r\n                        <a href=\"https://projectaki.github.io/portfolio_akos_madarasz/#/Projects\" style={{color: \"black\"}} >\r\n                            <i class=\"fas fa-arrow-left fa-2x\"></i>\r\n                        </a>\r\n                    </div>\r\n                <div className=\"boardCont\">\r\n                    {grid}    \r\n                </div>\r\n\r\n                <div class=\"buttonCont\">\r\n                    <div>\r\n                    <input style={{ fontSize: \"1.5vmin\", color: \"white\"}} type=\"file\"\r\n                    name=\"myFile\"\r\n                    accept=\".txt\"\r\n                    onChange={e => \r\n                        this.handleChangeFile(e.target.files[0])}/>\r\n                    </div>\r\n                    <div style={{paddingTop: \"2vmin\"}}>\r\n                        <button onClick={() => this.solve()}>Solve</button>\r\n                        \r\n                    </div>\r\n                    \r\n                \r\n                    \r\n\r\n                </div>\r\n                \r\n                <div id=\"modal1\" class=\"modal\">\r\n                    <div class=\"modal-content\">\r\n                    <h4 style={{fontSize: \"2vmin\"}}>Instruction</h4>\r\n                    <p style={{fontSize: \"1.5vmin\"}}>Upload a txt file of a 9x9 sudoku then press solve!\r\n    \r\n                    </p>\r\n                    <p style={{fontSize: \"1.5vmin\"}}>Limitations: for now it is only solving 9x9 sudokus, and the board must be in a format\r\n                        where the empty spaces are represented by 0s\r\n    \r\n                    </p>\r\n                    <p style={{fontSize: \"1.5vmin\"}}>\r\n                            For example:<br/>\r\n                            003020600<br/>\r\n                            900305001<br/>\r\n                            001806400<br/>\r\n                            008102900<br/>\r\n                            700000008<br/>\r\n                            006708200<br/>\r\n                            002609500<br/>\r\n                            800203009<br/>\r\n                            005010300\r\n                    </p>\r\n                    \r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                \r\n            </>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nfunction fillBoard() {\r\n    const board = [];\r\n    for(let i = 0; i < 81; i++) {\r\n        board.push(0);\r\n    }\r\n    return board;\r\n}\r\n\r\nfunction coordMap(i , j) {\r\n    return i * 9 + j;\r\n}\r\n\r\nfunction delay(n) {  \r\n    n = n || 2000;\r\n    return new Promise(done => {\r\n      setTimeout(() => {\r\n        done();\r\n      }, n);\r\n    });\r\n  }\r\n","import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav>\r\n            <div class=\"nav-wrapper\" style={{textAlign: \"center\"}}>\r\n              <a className=\"title\">Sudoku Solver</a>\r\n              \r\n            </div>\r\n          </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import Sudoku from \"./SudokuFront/Sudoku.jsx\";\nimport Navbar from \"./components/Navbar\";\nfunction App() {\n  return (\n    <>\n    <Navbar/>\n    <Sudoku/>\n    \n        </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}